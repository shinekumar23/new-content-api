name: Restore database

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: Workflow Run
        default: Restore
        required: true

jobs:

  build:

    runs-on: ubuntu-latest
    environment: dev
    steps:
    - uses: actions/checkout@v3
      id: build
      with:
          fetch-depth: 0
    - name: Build the Docker image
      env:
        DB_HOST: ${{ vars.DEV_DB_HOST }}
        DB_USERNAME: ${{ vars.DEV_DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
        DB_DATABASE: ${{ vars.DEV_DB_DATABASE }}
        AWS_ACCESS_KEY: ${{ secrets.DEV_AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.DEV_AWS_SECRET_KEY }}
        REGION: ${{ vars.REGION }}

      if: github.event.inputs.version == 'Restore'
      run: |
        set -x
        aws configure set aws_access_key_id $AWS_ACCESS_KEY
        aws configure set aws_secret_access_key $AWS_SECRET_KEY
        aws configure set region $REGION
        aws s3 cp s3://cognianextgen-rds-backup/data.sql .
        PGPASSWORD=Agb09hbs2 pg_dump -h cognianxtgen.cluster-cpdaobpdl4ur.us-east-2.rds.amazonaws.com -U cognianxtgenuser -d cognianxtgendb -f backup.sql
        # Check if the dump command was successful (exit status 0)
        if [ $? -eq 0 ]; then
            echo "Dump command executed successfully"
            
            # Perform the restore command
            PGPASSWORD=Agb09hbs2 pg_restore -h cognianxtgen.cluster-cpdaobpdl4ur.us-east-2.rds.amazonaws.com -U cognianxtgenuser -d cognianxtgendb data.sql
            
            # Check if the restore command was successful (exit status 0)
            if [ $? -eq 0 ]; then
                echo "Restore command executed successfully"
                aws s3 cp backup.sql s3://cognianextgen-rds-backup/backup/
            else
                echo "Restore command failed"
            fi
        else
            echo "Dump command failed"
        fi
